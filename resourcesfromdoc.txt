************** Day01 content &******************
Design pattern
https://refactoring.guru/design-patterns



1- install laravel

2- laravel provide command line tool --> artisan --> run it using php
helps me to apply adminstrative tasks on the project



2-Routing
https://laravel.com/docs/11.x/routing

# url params
https://laravel.com/docs/11.x/routing#required-parameters


#### laravel blades
https://laravel.com/docs/11.x/blade
Blade template files use the .blade.php file extension and are typically stored in the resources/views directory.

blade directives
https://laravel.com/docs/11.x/blade#blade-directives

# blade loops
https://laravel.com/docs/11.x/blade#loops


# template inheritance ?? with .blade.php files
    you can define basic layouts --> and then use it in other pages
    https://laravel.com/docs/11.x/blade#layouts-using-template-inheritance


# use controller
php artisan make:controller StudentController

lab01
1- implement views like slide 18,19,20
2- We will make CRUD operation on Posts
3- All Posts in navbae is a link that redirect back to /posts route
    --> hint use route()
4- Use blade layout to not duplicate navbar across view ﬁles

############################# Day02 #####################
1- load images from server
# add your static images to folder public

##################### Day03 ############################
from laravel 11
laravel project included with it sql-lite db files

# use mysql --> with our project --> hide details --> project can deal with
different databases.

host , username, password , port , database name

#### .env file



### laravel project --> has default parts
---> users table --> ready --> use register/ login implementation
 --> allow for sessions between webpages
 --> tables for common actions --> ready and added to the db
    --> sessions

  info about these table

  **** create table students (id , name, email, grade, image, gender)
  I need to ask laravel to create this table

we will use migration files
    1- know db structrure
    2- acts like ? versioning control for the db arch.
    all changes you apply to the db structure will be reflected into migration
    then you can share db arch. with team
    you control which files neeeded to be run / rollback



# I need to create migration files (make)

# table_name ===> students
php artisan make:migration create_students_table

https://laravel.com/docs/11.x/migrations

create tables
https://laravel.com/docs/11.x/migrations#creating-tables

available cols datatypes
https://laravel.com/docs/11.x/migrations#columns

take in consideration that when you create table using migration files in laravel default of
columns are not null unless you say something else

#### crud operations
    create
    edit
    delete
    update student


## use query builder
https://laravel.com/docs/11.x/queries#select-statements


use models : https://laravel.com/docs/11.x/eloquent

generate model
--> table --> students  ---> Model name Student

*** select all objects
https://laravel.com/docs/11.x/eloquent#retrieving-models

***** select one object
https://laravel.com/docs/11.x/eloquent#retrieving-single-models

*** delete object
https://laravel.com/docs/11.x/eloquent#deleting-models

*** create object
https://laravel.com/docs/11.x/csrf#main-content
https://en.wikipedia.org/wiki/Cross-site_request_forgery

###################################################################


to create users 000> use factory// seeders to create 10 users

1-We will make CRUD operation on Posts
2- When submitting a form make sure to redirect back to /posts
   route ()



##################################### Day03 ######################################33
https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
1- use http request methods
    /students  --> get
    /students - --> post new student
    / students/create --> get
    /students/id  --> show
    /students/id/edit ---> get
    /students/id/update  ---> post  replace with put
    /students/id/delete  --> get  --> delete replace with delete

    html form knows only get and post methods
    form inside form --> change method


***************2- validate form inputs

https://laravel.com/docs/11.x/validation#main-content

validation rules

https://laravel.com/docs/11.x/validation#available-validation-rules

********************** 3- resource controller
### laravel introduce  Resource controller
--> Employee =>id , name, email, image, gender , salary
1- generate migration files
2- create model
3- create controller
    php artisan make:controller EmployeeController --model=Employee
    create resource controller based on specific
        --> create , edit , index, show, update, destroy , store

4- if you are using resource controller then you can generate routes in one line ??
    Route::resource('/employees', EmployeeController::class];

5- to display all routes in app.
    php artisan route:list

method          url                                     route names       controller function
GET|HEAD        employees ............................. employees.index › EmployeeController@index
  POST            employees ........................... employees.store › EmployeeController@store
  GET|HEAD        employees/create ................... employees.create › EmployeeController@create
  GET|HEAD        employees/{employee} ................ employees.show › EmployeeController@show
  PUT|PATCH       employees/{employee} ............. employees.update › EmployeeController@update
  DELETE          employees/{employee} ............... employees.destroy › EmployeeController@destroy
  GET|HEAD        employees/{employee}/edit ................ employees.edit › EmployeeController@edit


###### let's create 10 employees as dummy data
use factories --> generate fake data for test


#*********** use mass assignment in saving, getting object
hint use fillable property
https://laravel.com/docs/11.x/eloquent#mass-assignment


*********************** relation between models
--> dept --> emp -->each employee works only one dept
dept has many emps

generate all needed files for the new model department

########## connect emp with dept
--> on db level
    --> I need migration file
    php artisan make:migration add_department_id_to_employees_table



--> on model level
    --> define relation ???


#######################################

why we used resource controller ?
1- generate basic function for crud operation on resource
2- generate basic routes
3- automatically detect resource object and deals with it


####################################### Requests in laravel
all operations on the request will be seperated in another file --->
 associated with request .. update, store

************************************************************
## use customized requests --> with managers resource

php artisan make:model Manager -mcr

## validation on update. store
--> make request class for ?? store , update
php artisan make:request StoreManagerRequest




# define new rule















